{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","useState","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","useWeb3","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","useEffect","getAll","then","catch","err","length","proposalId","setProviderOrSigner","getAllClaimerAddresses","addresess","getAllHolderBalances","amounts","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","balanceOf","balance","gt","className","onClick","name","style","fontSize","member","str","substring","onSubmit","e","a","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","document","getElementById","type","checked","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","value","defaultChecked","htmlFor","label","disabled","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"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","file":"static/js/main.a99d0cc0.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { ethers } from \"ethers\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0x40EE90B58ea399B014B7d62699F92892e7ccf6D2\",\n);\nconst tokenModule = sdk.getTokenModule(\n  \"0x04073Aee295098023F268456e1cdE46dd1F6163c\"\n);\nconst voteModule = sdk.getVoteModule(\n  \"0xad9c41e76B878391D73bd9723190611065e46DA4\",\n);\n\nconst App = () => {\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n  const [memberAddresses, setMemberAddresses] = useState([]);\n  const shortenAddress = (str) => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  };\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"ðŸ‘‹ Address:\", address);\n  const signer = provider ? provider.getSigner() : undefined;\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    voteModule\n      .getAll()\n      .then((proposals) => {\n        setProposals(proposals);\n        console.log(\"ðŸŒˆ Proposals:\", proposals)\n      })\n      .catch((err) => {\n        console.error(\"failed to get proposals\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    if (!proposals.length) {\n      return;\n    }\n\n    voteModule\n      .hasVoted(proposals[0].proposalId, address)\n      .then((hasVoted) => {\n        setHasVoted(hasVoted);\n        console.log(\"ðŸ¥µ User has already voted\")\n      })\n      .catch((err) => {\n        console.error(\"failed to check if wallet has voted\", err);\n      });\n  }, [hasClaimedNFT, proposals, address]);\n\n\n  useEffect(() => {\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    bundleDropModule\n      .getAllClaimerAddresses(\"0\")\n      .then((addresess) => {\n        console.log(\"ðŸš€ Members addresses\", addresess)\n        setMemberAddresses(addresess);\n      })\n      .catch((err) => {\n        console.error(\"failed to get member list\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    tokenModule\n      .getAllHolderBalances()\n      .then((amounts) => {\n        console.log(\"ðŸ‘œ Amounts\", amounts)\n        setMemberTokenAmounts(amounts);\n      })\n      .catch((err) => {\n        console.error(\"failed to get token amounts\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          memberTokenAmounts[address] || 0,\n          18,\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n    \n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"ðŸŒŸ this user has a membership NFT!\")\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"ðŸ˜­ this user doesn't have a membership NFT.\")\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.error(\"failed to nft balance\", error);\n      });\n  }, [address]);\n\n  if(!address){\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to FootballDAO</h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n  if (error && error.name === \"UnsupportedChainIdError\") {\n    return (\n      <div className=\"unsupported-network\">\n        <h2>Please connect to Rinkeby</h2>\n        <p>\n          This dapp only works on the Rinkeby network, please switch networks\n          in your connected wallet.\n        </p>\n      </div>\n    );\n  }\n\n  if (hasClaimedNFT) {\n     return (\n      <div className=\"member-page\">\n        <h1>âš½ Football Club DAO</h1>\n        <p style={{fontSize: '1.5rem'}}>Your Account: {address}</p>\n        <div>\n          <div>\n            <h2>Member List</h2>\n            <table className=\"card\">\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th>Token Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td>{shortenAddress(member.address)}</td>\n                      <td>{member.tokenAmount}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div>\n            <h2>Active Proposals</h2>\n            <form\n              onSubmit={async (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                setIsVoting(true);\n\n                const votes = proposals.map((proposal) => {\n                  let voteResult = {\n                    proposalId: proposal.proposalId,\n                    vote: 2,\n                  };\n                  proposal.votes.forEach((vote) => {\n                    const elem = document.getElementById(\n                      proposal.proposalId + \"-\" + vote.type\n                    );\n\n                    if (elem.checked) {\n                      voteResult.vote = vote.type;\n                      return;\n                    }\n                  });\n                  return voteResult;\n                });\n\n                try {\n                  const delegation = await tokenModule.getDelegationOf(address);\n                  if (delegation === ethers.constants.AddressZero) {\n                    await tokenModule.delegateTo(address);\n                  }\n                  try {\n                    await Promise.all(\n                      votes.map(async (vote) => {\n                        const proposal = await voteModule.get(vote.proposalId);\n                        if (proposal.state === 1) {\n                          return voteModule.vote(vote.proposalId, vote.vote);\n                        }\n                        return;\n                      })\n                    );\n                    try {\n                      await Promise.all(\n                        votes.map(async (vote) => {\n                          const proposal = await voteModule.get(\n                            vote.proposalId\n                          );\n                          if (proposal.state === 4) {\n                            return voteModule.execute(vote.proposalId);\n                          }\n                        })\n                      );\n                      setHasVoted(true);\n                      console.log(\"successfully voted\");\n                    } catch (err) {\n                      console.error(\"failed to execute votes\", err);\n                    }\n                  } catch (err) {\n                    console.error(\"failed to vote\", err);\n                  }\n                } catch (err) {\n                  console.error(\"failed to delegate tokens\");\n                } finally {\n                  setIsVoting(false);\n                }\n              }}\n            >\n              {proposals.map((proposal, index) => (\n                <div key={proposal.proposalId} className=\"card\">\n                  <h5>{proposal.description}</h5>\n                  <div>\n                    {proposal.votes.map((vote) => (\n                      <div key={vote.type}>\n                        <input\n                          type=\"radio\"\n                          id={proposal.proposalId + \"-\" + vote.type}\n                          name={proposal.proposalId}\n                          value={vote.type}\n                          defaultChecked={vote.type === 2}\n                        />\n                        <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\n                          {vote.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              <button disabled={isVoting || hasVoted} type=\"submit\">\n                {isVoting\n                  ? \"Voting...\"\n                  : hasVoted\n                    ? \"You Already Voted\"\n                    : \"Submit Votes\"}\n              </button>\n              <small>\n                This will trigger multiple transactions that you will need to\n                sign.\n              </small>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const mintNft = () => {\n    setIsClaiming(true);\n    bundleDropModule\n    .claim(\"0\", 1)\n    .catch((err) => {\n      console.error(\"failed to claim\", err);\n      setIsClaiming(false);\n    })\n    .finally(() => {\n      setIsClaiming(false);\n      setHasClaimedNFT(true);\n      console.log(\n        `ðŸŒŠ Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n      );\n    });\n  }\n\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free âš½DAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => mintNft()}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nimport {ThirdwebWeb3Provider} from '@3rdweb/hooks';\n\nconst supportedChainIds = [4];\n\nconst connectors = {\n  injected: {},\n};\n\n// Render the App component to the DOM\nReactDOM.render(\n  <React.StrictMode>\n   <ThirdwebWeb3Provider\n      connectors={connectors}\n      supportedChainIds={supportedChainIds}\n    >\n      <div className=\"landing\">\n        <App />\n      </div>\n    </ThirdwebWeb3Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}